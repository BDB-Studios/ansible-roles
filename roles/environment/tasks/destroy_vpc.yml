- name: get VPC data
  ec2_vpc_net_facts:
    filters:
      'tag:Name': "{{ vpc.env_tags.Name }}"
  register: vpc_data

- set_fact:
    vpc_id: "{{ vpc_data.vpcs.0.id }}"

- name: Get list of subnets
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: subnet_data
  always_run: true
  tags:
    - always

- name: Setup vars for playbook
  set_fact:
    private_subnets: "{{ subnet_data.subnets | selectattr('tags.Name', 'match', '^private.*')| map(attribute='id') | list }}"
    public_subnets: "{{ subnet_data.subnets | selectattr('tags.Name', 'match', '^public.*')| map(attribute='id') | list }}"

- name: get a list of all instances based on the stack tag
  ec2_remote_facts:
    filters:
      vpc_id: "{{ vpc_id }}"
      "tag:Stack": "{{ target }}"
  register: instance_data

- name: Retrieve all related launch configurations
  command: "aws autoscaling describe-launch-configurations --output json"
  register: launch_configs

- name: Extract stack specific lc's
  set_fact:
    env_launch_configs: "{{ launch_configs.stdout | get_launch_configs(target)| default(None) }}"

- name: Get details of zones for stack
  route53_facts:
    query: hosted_zone
  register: hosted_zones

- block:
    - name: expose private zone id
      set_fact:
        internal_zone_id: "{{ hosted_zones | get_zone_id(target + '.internal') | default(None) }}"

    - name: Get list of DNS records for private zone
      route53_facts:
        query: record_sets
        hosted_zone_id: "{{ internal_zone_id }}"
        max_items: 200
      when: internal_zone_id|length > 0
      register: dns_zone_records

#- block:
#
#    - name: expose public zone id
#      set_fact:
#        external_zone_id: "{{ hosted_zones | get_zone_id(global_data.domain_name) | default(None) }}"
#
#    - name: set search domain
#      set_fact:
#        public_search_domain: "{{ target + '.' + global_data.domain_name }}"
#
#    - name: Get list of DNS records for public zone
#      route53_facts:
#        query: record_sets
#        hosted_zone_id: "{{ external_zone_id }}"
#        max_items: 200
#      when: external_zone_id|length > 0
#      register: public_dns_zone_records
#
#    - name: Lookup relevant public dns entries
#      set_fact:
#        public_dns_entries: "{{ public_dns_zone_records.ResourceRecordSets |  selectattr('Name', 'search', public_search_domain) | list }}"


- name: Check if NAT gateway exists
  ec2_vpc_nat_gateway_facts:
    region: "{{ vpc.aws_region }}"
    filters:
      subnet-id: "{{ public_subnets[0] }}"
  register: has_nat_gw

#- name: Show what we are deleting
#  debug:
#    msg: "{{ vpc_data | combine(instance_data) | combine(has_nat_gw.result) }}"

- name: Remove all instances
  ec2:
    state: absent
    instance_id: "{{ item.id }}"
    wait: yes
  with_items: "{{ instance_data.instances| default([]) }}"

- name: Remove nat gw
  ec2_vpc_nat_gateway:
    nat_gateway_id: "{{ has_nat_gw.result[0].NatGatewayId }}"
    state: absent
    wait: yes
  when: "{{ has_nat_gw.result | count > 0 }}"

- name: Remove VPC
  ec2_vpc:
    state: absent
    cidr_block: "{{ vpc.cidr }}"
    resource_tags: "{{ vpc.env_tags }}"
    wait: yes