- name: get VPC data
  ec2_vpc_net_facts:
    filters:
      'tag:Name': "{{ vpc.env_tags.Name }}"
  register: vpc_data

- name: get a list of all instances based on the stack tag
  ec2_remote_facts:
    filters:
      vpc_id: "{{ vpc_data.vpcs[0].id }}"
      "tag:Stack": "{{ target }}"
  register: instance_data

- name: Check if NAT gateway exists
  ec2_vpc_nat_gateway_facts:
    region: "{{ vpc.aws_region }}"
    filters:
      subnet-id: "{{ public_subnets[0] }}"
  register: has_nat_gw

- name: Show what we are deleting
  debug:
    msg: "{{ vpc_data | combine(instance_data) | combine(has_nat_gw.result) }}"

- name: Remove all instances
  ec2:
    state: absent
    instance_id: "{{ item.id }}"
    wait: yes
  with_items: "{{ instance_data.instances| default([]) }}"

- name: Remove nat gw
  ec2_vpc_nat_gateway:
    nat_gateway_id: "{{ has_nat_gw.result[0].NatGatewayId }}"
    state: absent
    wait: yes
  when: "{{ has_nat_gw.result | count > 0 }}"

- name: Remove VPC
  ec2_vpc:
    state: absent
    cidr_block: "{{ vpc.cidr }}"
    resource_tags: "{{ vpc.env_tags }}"
    wait: yes