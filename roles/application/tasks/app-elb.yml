- assert:
    that:
      - elbdata is defined
      - elb_name is defined

- block:
    - block:
        - name: get search string
          set_fact:
            search_str: '^{{ elbdata.elb_sg.client_sg }}.*'

        - name: Lookup client group id
          set_fact:
            elb_client_sg_id: "{{ client_security_groups.results| selectattr('item.name', 'match', search_str) | map(attribute='group_id') | list| first }}"

        - name: Create security group for elb
          ec2_group:
            name: "{{ elbdata.elb_sg.name }}"
            description: "{{ elbdata.elb_sg.desc }}"
            rules: "{{ elbdata.elb_sg.ruleset | rules_from_dict([elb_client_sg_id]) }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: elb_security_group_1
      when: elbdata.elb_sg.client_sg is defined

    - block:
        - name: Create security group for elb
          ec2_group:
            name: "{{ elbdata.elb_sg.name }}"
            description: "{{ elbdata.elb_sg.desc }}"
            rules: "{{ elbdata.elb_sg.ruleset | rules_from_dict() }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: elb_security_group_2

      when: not elbdata.elb_sg.client_sg is defined

    - name: Add tags until 2.2
      ec2_tag:
        resource: "{{ elb_security_group_2.group_id | default(elb_security_group_1.group_id) }}"
        state: present
        tags: "{{ vpc.env_tags | combine({'Name': elbdata.elb_sg.name}) }}"

  when: elbdata.elb_sg is defined

- name: Create ELB for app
  ec2_elb_lb:
    state: present
    subnets: "{{ elbdata.subnets }}"
    purge_subnets: True
    name: "{{ elb_name }}-{{ global_data.stack_name }}"
    tags: "{{ vpc.env_tags | combine({ 'Name': elb_name + '-' + global_data.stack_name}) }}"
    scheme: "{{ elbdata.type | default(omit) }}"
    listeners: "{{ elbdata.listeners }}"
#    health_check: "{{ elbdata.health_check }}"
    security_group_names: "{{ elbdata.sg }}"
    cross_az_load_balancing: yes
  register: app_elb

- name: Create cloudwatch alarm for elb
  ec2_metric_alarm:
    state: present
    name: "{{ elbdata.alarm.name|default(elb_name + '-' + global_data.stack_name) }}"
    metric: "{{ elbdata.alarm.metric }}"
    namespace: "AWS/ELB"
    statistic: "{{ elbdata.alarm.statistic|default('Average') }}"
    comparison: "{{ elbdata.alarm.comparison|default('==') }}"
    threshold: "{{ elbdata.alarm.theshold|default('1') }}"
    period: "{{ elbdata.alarm.period|default('60') }}"
    evaluation_periods: "{{ elbdata.alarm.eval_periods|default('2') }}"
    description: "{{ elbdata.alarm.description|default('ELB Check for ' + elb_name + '-' + global_data.stack_name) }}"
    dimensions: {'LoadBalancerName': '{{ elb_name }}-{{ global_data.stack_name }}'}
    alarm_actions: "{{ elbdata.alarm.actions|default([]) }}"
  when: elbdata.alarm is defined

- name: Add route53 Public entry for elb
  route53:
    command: create
    overwrite: yes
    record: "{{ elbdata.public_dns }}.{{ global_data.domain}}."
    zone: "{{ global_data.domain}}."
    type: A
    alias: True
    value: "{{ app_elb.elb.dns_name }}"
    alias_hosted_zone_id: "{{ app_elb.elb.hosted_zone_id }}"
    ttl: 60
  when: elbdata.public_dns is defined

- name: Add route53 private entry for elb
  route53:
    command: create
    overwrite: yes
    record: "{{ elbdata.private_dns }}.internal."
    zone: "{{ global_data.stack_name }}.internal."
    private_zone: yes
    type: A
    alias: True
    value: "{{ app_elb.elb.dns_name }}"
    alias_hosted_zone_id: "{{ app_elb.elb.hosted_zone_id }}"
    ttl: 60
  when: elbdata.private_dns is defined